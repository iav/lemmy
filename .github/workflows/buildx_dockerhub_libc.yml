
name: buildx libc version for dockerhub

on:
  workflow_dispatch:
  pull_request:
    branches: [ gh-auto, master ]
  push:
    branches: [ gh-auto, master ]

    # Publish `v1.2.3` tags as releases.
    tags:
       - v*
env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
  DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
  # DOCKERHUB_TOKEN should be set in "secrets" property of github repository


jobs:
  prepare_all_buildx:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_ID:  ${{ steps.setvars.outputs.IMAGE_ID }}
      VERSION:  ${{ steps.setvars.outputs.VERSION }}
    steps:
      -
        name: Prepare container names
        id: setvars
        run: |
          set -x
          IMAGE_ID=$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          VERSION=${VERSION}libc
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          echo "::set-output name=IMAGE_ID::$IMAGE_NAME"
          echo "::set-output name=VERSION::$VERSION"

  buildx-matrix:
    needs: prepare_all_buildx
    runs-on: ubuntu-latest
    env:
        IMAGE_ID: ${{ needs.prepare_all_buildx.outputs.IMAGE_ID }}
        VERSION: ${{ needs.prepare_all_buildx.outputs.VERSION }}
    strategy:
        fail-fast: false
        matrix:
          platform: [ amd64, arm64, armv7 ]
          include:
            - platform: arm64
              BUILDXPLATFORM: linux/aarch64
            - platform: amd64
              BUILDXPLATFORM: linux/amd64
            - platform: armv7
              BUILDXPLATFORM: linux/arm/v7

    steps:


      # - name: try to free some space
        # run: |
          # sudo apt-get remove -y cabal* gfortran* ghc* dotnet* libmono* mono* libmono* php* \
            # clang* openjd* mongo* zulu*
          # #llvm*
          # sudo apt-get autoremove -y
          # sudo df -h
          # dpkg-query -l

      -
        name: create small fs for docker cache
        run: |
          #sudo swapon --show
          sudo systemctl stop docker
          sudo rm -rf /var/lib/docker/*
          #apt list --installed
          #sudo dd if=/dev/zero of=/swapfile1 bs=1M count=24K
          sudo dd if=/dev/zero of=/swapfile1 bs=1M count=10K
          sudo chmod 600 /swapfile1
          #sudo mkswap /swapfile1
          sudo mkfs.btrfs /swapfile1
          #sudo swapon /swapfile1
          #sudo swapon --show
          sudo free -h

          #sudo mount -t tmpfs -o size=10G tmpfs /var/lib/docker
          sudo mount /swapfile1 /var/lib/docker
          df -h
          sudo systemctl start docker

      -
        name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest

      -
        name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Log into registry
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_REGISTRY_USERNAME }}" --password-stdin

      -
        name: Checkout
        uses: actions/checkout@v2

      -
        name: Buildx ${{ matrix.platform }}
        run: |
          set -x
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo IMAGE_NAME=$IMAGE_NAME
          echo ${{ needs.prepare_all_buildx.outputs.IMAGE_ID }}
          docker buildx build \
            --platform ${{ matrix.BUILDXPLATFORM }} \
            --tag $IMAGE_NAME:${VERSION}libc-${{ matrix.platform }} \
            --progress plain \
            --file docker/prod/Dockerfile.libc \
            --push .
      -
        name: Post-build space check
        run: sudo df -h

  make_manifest:
    runs-on: ubuntu-latest
#    needs: [ buildx_arm64, buildx_armv7, buildx_amd64 ]
    needs: [ buildx-matrix, prepare_all_buildx ]
    env:
        IMAGE_ID: ${{ needs.prepare_all_buildx.outputs.IMAGE_ID }}
        VERSION: ${{ needs.prepare_all_buildx.outputs.VERSION }}
    steps:

      -
        # Enable experimental features in Docker client
        name: Enable experimental docker client
        run: |
          mkdir -p $HOME/.docker
          echo -e "{\n  \"experimental\": \"enabled\"\n}" | tee -a $HOME/.docker/config.json
          docker version
          cat $HOME/.docker/config.json

      - name: Log into registry
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_REGISTRY_USERNAME }}" --password-stdin

      -
        name: Push manifest
        run: |
          env
          set -x
          echo "build complete $(date)"
          IMAGE_ID=$IMAGE_NAME
          docker manifest create $IMAGE_ID:${VERSION}libc \
            $IMAGE_ID:${VERSION}libc-amd64 \
            $IMAGE_ID:${VERSION}libc-arm64 \
            $IMAGE_ID:${VERSION}libc-armv7
          docker manifest annotate $IMAGE_ID:${VERSION} $IMAGE_ID:${VERSION}libc-armv7 \
            --os=linux --arch=arm --variant=v7
          docker manifest annotate $IMAGE_ID:${VERSION} $IMAGE_ID:${VERSION}libc-arm64 \
            --os=linux --arch=arm64
          docker manifest inspect $IMAGE_ID:${VERSION}libc
          docker manifest push $IMAGE_ID:${VERSION}libc


