# can be build on x64, arm32, arm64 platforms
# to build on target platform run
# docker build -f Dockerfile.libc -t dessalines/lemmy:version ../..
#
# to use docker buildx run
# docker buildx build --platform linux/amd64,linux/arm64 -f Dockerfile.libc -t YOURNAME/lemmy --push ../..

FROM rust:1.48 as rust

WORKDIR /app/server
COPY . ./

# workaround for https://github.com/rust-lang/rust/issues/62896
#RUN RUSTFLAGS='-Ccodegen-units=1' cargo build --release
#RUN cargo build --release --frozen
RUN cargo build --release

# make result place always the same for lemmy container
RUN cp /app/server/target/release/lemmy_server /app/server/
#RUN cp /app/server/target/debug/lemmy_server /app/server/
RUN strip /app/server/lemmy_server


#FROM rust:1.48 as docs
FROM --platform=$BUILDPLATFORM rust:1.48 as docs

WORKDIR /app

# Build docs
COPY docs ./docs
RUN cargo install mdbook
RUN mdbook build docs/



#FROM node:13-buster as node
# use this if use docker buildx
FROM --platform=$BUILDPLATFORM node:13-buster as node

WORKDIR /app/ui

# Cache deps
COPY ui/package.json ui/yarn.lock ./
RUN yarn install --pure-lockfile --network-timeout 600000

# Build
COPY ui /app/ui
RUN yarn build



#FROM alpine:3.12
# debian because build with dynamic linking with debian:buster
FROM debian:buster as lemmy

# Install libpq for postgres
#RUN apk add libpq
RUN apt-get update && apt-get install -y libpq5 espeak
RUN addgroup --gid 1000 lemmy
# for alpine
#RUN adduser -D -s /bin/sh -u 1000 -G lemmy lemmy
# for debian
RUN adduser --disabled-password --shell /bin/sh --uid 1000 --ingroup lemmy lemmy

RUN mkdir -p /app; chown -R lemmy:lemmy /app

# Copy resources
COPY --chown=lemmy:lemmy config/defaults.hjson /config/defaults.hjson
COPY --chown=lemmy:lemmy --from=rust /app/server/lemmy_server /app/lemmy
#COPY --chown=lemmy:lemmy --from=docs /app/docs/book/ /app/dist/documentation/

USER lemmy
EXPOSE 8536
CMD ["/app/lemmy"]
